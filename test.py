import pickle
import pandas as pd


test_data_single_row = {
    "label": [0],
    "code": [
        "errors:function(api){return{'_toExpand':false,serializers:{servers:{web:function(error){if(util.isError(error)){return String(error.message);}else{return error;}},websocket:function(error){if(util.isError(error)){return String(error.message);}else{return error;}},socket:function(error){if(util.isError(error)){return String(error.message);}else{return error;}},specHelper:function(error){if(util.isError(error)){return 'Error: '+String(error.message);}else{return error;}}}},invalidParams:function(data,validationErrors){if(validationErrors.length>=0){return validationErrors[0];}return 'validation error';},missingParams:function(data,missingParams){return data.connection.localize(['%s is a required parameter for this action',missingParams[0]]);},unknownAction:function(data){return data.connection.localize('unknown action or invalid apiVersion');},unsupportedServerType:function(data){return data.connection.localize(['this action does not support the %s connection type',data.connection.type]);},serverShuttingDown:function(data){return data.connection.localize('the server is shutting down');},tooManyPendingActions:function(data){return data.connection.localize('you have too many pending requests');},dataLengthTooLarge:function(maxLength,receivedLength){return api.i18n.localize(['data length is too big (%u received/%u max)',maxLength,receivedLength]);},fileNotFound:function(connection){return connection.localize(['That file is not found (%s)',connection.params.file]);},fileNotProvided:function(connection){return connection.localize('file is a required param to send a file');},fileReadError:function(connection,error){return connection.localize(['error reading file: %s',String(error)]);},verbNotFound:function(connection,verb){return connection.localize(['I do not know know to perform this verb (%s)',verb]);},verbNotAllowed:function(connection,verb){return connection.localize(['verb not found or not allowed (%s)',verb]);},connectionRoomAndMessage:function(connection){return connection.localize('both room and message are required');},connectionNotInRoom:function(connection,room){return connection.localize(['connection not in this room (%s)',room]);},connectionAlreadyInRoom:function(connection,room){return connection.localize(['connection already in this room (%s)',room]);},connectionRoomHasBeenDeleted:function(room){return api.i18n.localize('this room has been deleted');},connectionRoomNotExist:function(room){return api.i18n.localize('room does not exist');},connectionRoomExists:function(room){return api.i18n.localize('room exists');},connectionRoomRequired:function(room){return api.i18n.localize('a room is required');}};}"
    ],
}

df = pd.DataFrame(test_data_single_row)
with open("./dataset/trvd_test.pkl", "wb") as f:
    pickle.dump(df, f)
